
리엑트란? 
: 사용자 인터페이스(UI-User Interface)를 만들기 위한 JavaScript 라이브러리(컴포넌트)
: 리엑트는 로직을 만들어주는 것이 아님. 기능은 JavaScript가 만듬
: Meta(구 facebook) 에서 만든 라이브러리,  2013년도 오픈소스로 공개 
: 2015년도에 React Native(앱) 출시
: 2019년도에 함수 형태로 업데이트 됨. 전에는 클래스 기반
: 2022년도 서버 사이드(서버까지) 렌더링이 가능해짐
: HTML + Backend(java, c#) - 백엔드에서의 언어가 달라 html에서 서버에서 넘어오는, 프론트에서 이벤트 처리가 바로 바로 렌더링이 안됨 -> f5(새로고침)를 통해 작업을 새로 불러와야함 -> 서버를 자바스크립트로 가지고 앞단도 자바스크립트로 가지면 렌더링이 빨라짐 (리엑트의 전신)


2. 리엑트의 장점 
: 빠른 업데이트와 렌더링 속도 - React DOM을 활용하기 때문
: 컴포넌트 기반 구조 - 함수 기반의 컴포넌트 생성
: 재사용성 - 함수기반의 컴포넌트로 인해 재사용이 가능
: 든든한 지원군 - Meta(구 facebook)에서 support
: 활발한 지식공유 & 방대한 커뮤니티(NPM)
: 재 실행 없이도 바로 반영됨

3. 리엑트의 단점
: 방대한 학습량 - HTML, CSS, 자바스크립트 기본 +  React 문법 
: 높은 상태 관리 복잡도 - React Hooks를 통한 상태 관리

4. React 프로젝트 생성 및 실행
1) NodeJS 설치가 선행되어야 함
2) NPM 커뮤니티를 통해 React 앱을 생성함
3) React 앱 생성
  - npx create-react-app [생성할 앱(snake case 타입으로 입력)]
  - 생성시 터미널 안에서 실행
4) React 앱 실행 
  - cd [이동할 리엑트 앱 이름]
  - my-app > npm start    
  - 터미널 종료시 리엑트 서버 다운
   
5) React 종료 방법 
  - ctrl + c 

6) React 실행 순서 
 - npm start > src/index.js > ReactDOM을 만들어 APP(App.js호출)이라고 하는 컴포넌트를 실행 > index.js에서 index.html을 브라우저에 띄움
 * 맨 처음 호출하는 컴포넌트 변경가능/ index.html, index.js 변경 X
 * 화면에 보여지는 컴포넌트는 대문자로 시작
 *  

src -> 리엑트를 실행하기 위한 파일
컴포넌트는 블록과 똑같다
- 컴포넌트를 만들때 구분하기 위해 .jsx를 붙이며 첫글자는 대문자로 사용
- 컴포넌트에 들어가는 html은 반드시 하나의 태그로 그룹핑해서 사용해야한다!! 

7)_ 컴포넌트(Component) 
  - React의 UI를 만드는 블록을 구성하는 함수 컴포넌트
  - 첫글자는 대문자로 정의
  - return 키워드 다음에 ();를 준다. / {}들어갈땐 return 키워드가 들어가야 한다.
  - 반환되는 컴포넌트는 반드시 하나의 태그로 그룹핑을 한 후 반환되도록 한다. ex)_ <div>, <>
  - 로직을 실행하는 코드는 {} 묶어서 반환코드에 추가한다. 

props ** - 컴포넌트에서 데이터를 주고받는 형식 -> 오브젝트 리터럴 형태로 넘어간다 "{}"  




